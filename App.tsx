
import React, { useEffect, useState } from 'react';
import { GameScreen, Character } from './types';
import { GameProvider, useNavigation, useSession, useProfile, useSettings } from './src/context/GameContext';
import { MusicType, SoundType, startMusic, stopMusic } from './src/utils/AudioEngine';

import { GameWrapper } from './src/components/core/GameWrapper';
import { HUD } from './src/components/core/HUD';
import { IntroScreen } from './src/components/core/IntroScreen';
import { OutroScreen } from './src/components/core/OutroScreen';
import { ConfirmationModal } from './src/components/core/ConfirmationModal';
import { GlitchWinScreen } from './src/components/core/GlitchWinScreen';
import { InstructionModal } from './src/components/core/InstructionModal';
import { instructionData } from './src/data/instructionData';

import { ProfileSelectionScreen } from './src/components/screens/ProfileSelectionScreen';
import { LeaderboardScreen } from './src/components/screens/LeaderboardScreen';
import { StartScreen } from './src/components/screens/StartScreen';
import { CaseSelectionScreen } from './src/components/screens/CaseSelectionScreen';
import { FinalEnding } from './src/components/screens/FinalEnding';
import { DebugMenu } from './src/components/screens/DebugMenu';
import { LogView } from './src/components/screens/LogView';
import { DebugAnimationViewer } from './src/components/screens/DebugAnimationViewer';

import { minigameComponentMap } from './src/components/minigames';

// Helper to determine which music track to play for a given minigame
const getMusicForMinigame = (id: string): MusicType | null => {
    if (["1-1", "1-3"].includes(id)) return MusicType.AMBIENT_GALLERY;
    if (id === "1-2") return MusicType.AMBIENT_KVIR;
    if (id === "2-1") return MusicType.AMBIENT_DANCE;
    if (id === "2-3") return MusicType.AMBIENT_ZEN;
    if (id === "3-1") return MusicType.AMBIENT_STREET;
    if (["4-1", "4-2"].includes(id)) return MusicType.AMBIENT_FEMINIST_FIGHT;
    if (id === "5-1") return MusicType.AMBIENT_KITCHEN;
    if (["5-2", "6-2"].includes(id)) return MusicType.AMBIENT_TENSION;
    if (id === "6-1") return MusicType.AMBIENT_NATURE;
    if (id === "6-3") return MusicType.LOOP_VACUUM;
    return null; // For games with no bg music, like 3-2 (Pereverni Kalendar)
}

// Component for the content of the initial welcome/general instructions modal.
const WelcomeInstructionContent: React.FC<{ character?: Character | null; isMinigameInverted?: boolean }> = () => (
    <>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–ê–î–ê–®–ü–ò–õ–¨!</p>
        <p className="mt-4">–≠—Ç–æ –∞–±—Å—É—Ä–¥–∏—Å—Ç—Å–∫–∞—è –∏–≥—Ä–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å–µ—Ä–∏–∏ —Å—é—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–Ω–∏-–∏–≥—Ä.</p>
        <p className="mt-4 text-yellow-300"><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong></p>
        <ul className="list-disc list-inside space-y-2 mt-2">
            <li><strong>–í–∏–∑–æ—Ä (HUD):</strong> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ (‚Ä¢‚Ä¢‚Ä¢) –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å/–æ—Ç–∫—Ä–µ–ø–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –æ–Ω —Ç–∞–∫–∂–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏.</li>
            <li><strong>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</strong> –í –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –≤–∏–∑–æ—Ä–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
                <ul className="list-disc list-inside ml-4">
                    <li><span className="text-2xl">üîä/üîá</span> - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫.</li>
                    <li><span className="text-2xl">‚ÜóÔ∏è/‚ÜôÔ∏è</span> - –í–æ–π—Ç–∏/–≤—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è!).</li>
                    <li><span className="text-2xl">‚ÑπÔ∏è</span> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–µ–π –º–∏–Ω–∏-–∏–≥—Ä—ã.</li>
                    <li><span className="text-2xl">üö™</span> - –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.</li>
                </ul>
            </li>
            <li><strong>–ú–∏–Ω–∏-–∏–≥—Ä—ã:</strong> –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏–≥—Ä–æ–π. –û–±—ã—á–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –º—ã—à–∏ –∏–ª–∏ –∫–∞—Å–∞–Ω–∏—è.</li>
        </ul>
        <p className="mt-4">–£–¥–∞—á–∏, –¥–∞–¥–∞–∏—Å—Ç!</p>
    </>
);

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.
const App: React.FC = () => {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.
    const { screen, setScreen, isInstructionModalVisible, showInstructionModal, hideInstructionModal } = useNavigation();
    const { 
        currentCase, minigameIndex, winMinigame, loseMinigame, character,
        isSlowMo, isMinigameInverted, forcedOutro, isAbsurdEdgeBonusRound,
        isGlitchWin
    } = useSession();
    const { profileToDeleteId, profiles, confirmDeleteProfile, cancelDeleteProfile, isLogoutConfirmationVisible, confirmLogout, cancelLogout } = useProfile();
    const { debugMode, playSound } = useSettings();
    const [isInitialLaunch, setIsInitialLaunch] = useState(false);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–∏–Ω–∏-–∏–≥—Ä—É –∏ –µ—ë –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
    const currentMinigame = currentCase?.minigames[minigameIndex];
    const MinigameComponent = currentMinigame ? minigameComponentMap[currentMinigame.id] : null;

    // Check for first launch to show welcome instructions
    useEffect(() => {
        const hasSeenWelcome = localStorage.getItem('dada-spiel-has-seen-welcome');
        if (!hasSeenWelcome) {
            setIsInitialLaunch(true);
            showInstructionModal();
        }
    }, [showInstructionModal]);

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π
    useEffect(() => {
        if (screen === GameScreen.MINIGAME_PLAY && currentMinigame) {
            const musicType = getMusicForMinigame(currentMinigame.id);
            if (musicType !== null) {
                startMusic(musicType);
            } else {
                stopMusic();
            }
        } else if (screen === GameScreen.PROFILE_SELECTION || screen === GameScreen.CASE_SELECTION || screen === GameScreen.LEADERBOARD) {
            startMusic(MusicType.MENU);
        } else {
            // Stop music on any other screen (intros, outros, etc.)
            stopMusic();
        }
    }, [screen, currentMinigame]);
    
    const profilePendingDeletion = profiles.find(p => p.id === profileToDeleteId);

    const introWarning = isAbsurdEdgeBonusRound
        ? "–ì–†–ê–ù–¨ –ê–ë–°–£–†–î–ê: –ü–†–ê–í–ò–õ–ê –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–´! +2000 –û–ß–ö–û–í!"
        : isMinigameInverted
        ? "–°–î–í–ò–ì –†–ï–ê–õ–¨–ù–û–°–¢–ò: –ü–†–ê–í–ò–õ–ê –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–´!"
        : undefined;
    
    const InstructionContentComponent = currentMinigame ? instructionData[currentMinigame.id]?.content : WelcomeInstructionContent;
    const instructionTitle = currentMinigame ? instructionData[currentMinigame.id]?.title : "–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨";

    const renderScreen = () => {
        switch (screen) {
            case GameScreen.PROFILE_SELECTION:
                return <ProfileSelectionScreen />;
            case GameScreen.LEADERBOARD:
                return <LeaderboardScreen />;
            case GameScreen.START_SCREEN:
                return <StartScreen />;
            case GameScreen.CASE_SELECTION:
                return <CaseSelectionScreen />;
            case GameScreen.MINIGAME_INTRO:
                if (currentCase && currentMinigame) {
                    return (
                        <IntroScreen
                            title={currentMinigame.name}
                            text={currentMinigame.intro}
                            warning={introWarning}
                            onContinue={() => {
                                setScreen(GameScreen.MINIGAME_PLAY);
                                showInstructionModal();
                            }}
                        />
                    );
                }
                return null;
            case GameScreen.MINIGAME_PLAY:
                if (MinigameComponent) {
                    return (
                        <MinigameComponent 
                            onWin={winMinigame} 
                            onLose={loseMinigame} 
                            isSlowMo={isSlowMo}
                            isMinigameInverted={isMinigameInverted}
                        />
                    );
                }
                return null;
            case GameScreen.CASE_OUTRO:
                if (currentCase) {
                    return (
                        <OutroScreen
                            title="–î–ï–õ–û –ó–ê–í–ï–†–®–ï–ù–û"
                            text={forcedOutro || currentCase.outro}
                            onContinue={() => setScreen(GameScreen.CASE_SELECTION)}
                        />
                    );
                }
                return null;
            case GameScreen.FINAL_ENDING:
                return <FinalEnding />;
            case GameScreen.DEBUG_MENU:
                return <DebugMenu />;
            case GameScreen.LOG_VIEW:
                return <LogView />;
            case GameScreen.DEBUG_ANIMATION_VIEWER:
                return <DebugAnimationViewer />;
            default:
                return null;
        }
    };

    return (
        <GameWrapper>
            <HUD />
            
            <div key={screen} className="screen-content-wrapper">
                {renderScreen()}
            </div>
            
            {isGlitchWin && <GlitchWinScreen />}

            {debugMode && screen !== GameScreen.DEBUG_MENU && screen !== GameScreen.DEBUG_ANIMATION_VIEWER && (
                <button
                    onClick={() => setScreen(GameScreen.DEBUG_MENU)}
                    className="absolute bottom-4 right-4 pixel-button p-2 text-sm z-50 bg-purple-700 hover:bg-purple-800"
                    aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –æ—Ç–ª–∞–¥–∫–∏"
                >
                    –ê–õ–ê–î–ö–ò
                </button>
            )}

            {isInstructionModalVisible && !isLogoutConfirmationVisible && InstructionContentComponent && (
                 <InstructionModal
                    title={instructionTitle}
                    onStart={() => {
                        if (isInitialLaunch) {
                            localStorage.setItem('dada-spiel-has-seen-welcome', 'true');
                            setIsInitialLaunch(false);
                        }
                        hideInstructionModal();
                    }}
                 >
                    <InstructionContentComponent character={character} isMinigameInverted={isMinigameInverted} />
                </InstructionModal>
            )}

            {profilePendingDeletion && (
                <ConfirmationModal
                    title="–ü–û–î–¢–í–ï–†–î–ò–¢–ï –£–î–ê–õ–ï–ù–ò–ï"
                    message={
                        <>
                            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</p>
                            <p className="font-bold text-yellow-400 mt-2">"{profilePendingDeletion.name}"?</p>
                            <p className="mt-4 text-base text-gray-400">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
                        </>
                    }
                    onConfirm={() => {
                        playSound(SoundType.DESTROY);
                        confirmDeleteProfile();
                    }}
                    onCancel={() => {
                        playSound(SoundType.BUTTON_CLICK);
                        cancelDeleteProfile();
                    }}
                    confirmText="–£–î–ê–õ–ò–¢–¨"
                />
            )}

            {isLogoutConfirmationVisible && (
                 <ConfirmationModal
                    title="–í–´–•–û–î"
                    message={
                        <>
                          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?</p>
                          <p className="mt-4 text-base text-gray-400">–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Å—Å–∏–∏ (–æ—á–∫–∏) –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.</p>
                        </>
                    }
                    onConfirm={() => {
                        playSound(SoundType.BUTTON_CLICK);
                        confirmLogout();
                    }}
                    onCancel={() => {
                        playSound(SoundType.BUTTON_CLICK);
                        cancelLogout();
                    }}
                    confirmText="–í–´–ô–¢–ò"
                    confirmButtonClass="bg-blue-700 hover:bg-blue-800"
                />
            )}
        </GameWrapper>
    );
};

const AppWrapper: React.FC = () => (
    <GameProvider>
        <App />
    </GameProvider>
);

export default AppWrapper;
