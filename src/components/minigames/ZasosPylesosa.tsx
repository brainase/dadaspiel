
import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useSession, useSettings } from '../../context/GameContext';
import { useGameLoop } from '../../hooks/useGameLoop';
import { Character } from '../../../types';
import { CHARACTER_ART_MAP, PIXEL_ART_PALETTE } from '../../../characterArt';
import { PixelArt } from '../core/PixelArt';
import { SoundType } from '../../utils/AudioEngine';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ –ø—ã–ª–µ—Å–æ—Å–∞
const PixelVacuum: React.FC<{animationToggle: boolean}> = ({ animationToggle }) => {
    return (
        <div className="w-48 h-24 relative" style={{imageRendering: 'pixelated'}}>
            {/* –¢–µ–ª–æ */}
            <div className="absolute w-40 h-16 bg-yellow-400 border-4 border-black bottom-0 left-4 rounded-t-lg"></div>
            {/* –ö–æ–ª–µ—Å–∞ */}
            <div className="absolute w-10 h-10 bg-gray-600 border-4 border-black rounded-full bottom-[-8px] left-0"></div>
            <div className="absolute w-10 h-10 bg-gray-600 border-4 border-black rounded-full bottom-[-8px] right-0"></div>
            {/* –®–ª–∞–Ω–≥ */}
            <div className="absolute w-8 h-12 bg-gray-700 border-4 border-black top-[-8px] left-1/2 -translate-x-1/2"></div>
             {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ */}
            <div className={`absolute w-4 h-4 rounded-full top-2 left-20 ${animationToggle ? 'bg-red-500' : 'bg-green-500'}`}></div>
        </div>
    )
}

export const ZasosPylesosaWinScreen: React.FC<{ onContinue: () => void; charArt: string[] }> = ({ onContinue, charArt }) => {
    const { playSound } = useSettings();
    useEffect(() => {
        playSound(SoundType.WIN_PYLESOS);
    }, [playSound]);
    
    return (
        <div className="absolute inset-0 bg-black z-50 flex flex-col items-center justify-center overflow-hidden">
            <style>{`
                @keyframes suck-in {
                    0% { transform: translate(-50%, -50%) scale(1) rotate(0); }
                    100% { transform: translate(-50%, -50%) scale(0) rotate(720deg); top: 50%; }
                }
                @keyframes bloat {
                    0% { transform: translate(-50%, -50%) scale(1); }
                    50% { transform: translate(-50%, -50%) scale(1.5, 1.3); }
                    100% { transform: translate(-50%, -50%) scale(1); }
                }
                 @keyframes text-slam {
                    from { transform: scale(5) rotate(-30deg); opacity: 0; }
                    to { transform: scale(1) rotate(0deg); opacity: 1; }
                }
            `}</style>
            <div className="absolute top-[50%] left-[50%]" style={{ animation: 'bloat 1s ease-in-out 1s 3' }}>
                 <PixelArt artData={charArt} palette={PIXEL_ART_PALETTE} pixelSize={4} />
            </div>
            <div className="absolute top-[110%] left-[50%] z-[-1]" style={{ animation: 'suck-in 1s ease-in 0.5s forwards' }}>
                <PixelVacuum animationToggle={true}/>
            </div>
            <h2 className="text-8xl text-yellow-400" style={{ animation: 'text-slam 0.5s ease-out 3.5s forwards', opacity: 0 }}>–ó–ê–°–û–°–ê–õ!</h2>
             <button onClick={onContinue} className="pixel-button absolute bottom-8 p-4 text-2xl z-50" style={{ animation: 'text-slam 0.5s ease-out 4s forwards', opacity: 0 }}>
                –î–ê–õ–¨–®–ï
            </button>
        </div>
    )
}


export const ZasosPylesosa: React.FC<{ onWin: () => void; onLose: () => void }> = ({ onWin, onLose }) => {
    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ ---
    const { character } = useSession();
    const { playSound } = useSettings();

    const settings = useMemo(() => {
        const baseSettings = { survivalTime: 30, baseScrollSpeed: 15, spawnRateMultiplier: 1 };
        switch(character) {
            case Character.KANILA: // Easy
                return { survivalTime: 35, baseScrollSpeed: 12, spawnRateMultiplier: 0.7 };
            case Character.BLACK_PLAYER: // Hard
                return { survivalTime: 25, baseScrollSpeed: 18, spawnRateMultiplier: 1.4 };
            default: // Medium (Sexism)
                return baseSettings;
        }
    }, [character]);
    
    const [timeLeft, setTimeLeft] = useState(settings.survivalTime);
    const [playerX, setPlayerX] = useState(50); // –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –ø–æ X –≤ %
    const [obstacles, setObstacles] = useState<any[]>([]);
    const [vacuumX, setVacuumX] = useState(50); // –ü–æ–∑–∏—Ü–∏—è –ø—ã–ª–µ—Å–æ—Å–∞ –ø–æ X
    const [status, setStatus] = useState<'playing'|'won'|'lost'>('playing');
    const [scrollOffset, setScrollOffset] = useState(0); // –î–ª—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ —Ñ–æ–Ω–∞

    // --- –°—Å—ã–ª–∫–∏ ---
    const gameAreaRef = useRef<HTMLDivElement>(null);
    const hasFinished = useRef(false);
    const obstacleId = useRef(0);
    const lastPlayerX = useRef(50); // –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–∫–ª–æ–Ω–∞

    // --- –ê—Ä—Ç –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
    const charArt = useMemo(() => CHARACTER_ART_MAP[character || Character.KANILA], [character]);
    const obstacleTypes = useMemo(() => ['üéπ', 'üóø', '–ê–ë–°–£–†–î', '‚ô¶', 'üìÑ', 'üî•', 'üëü', 'üçî'], []);
    const PLAYER_Y_POS = 80; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –≤ %
    
    useEffect(() => {
        setTimeLeft(settings.survivalTime);
    }, [settings.survivalTime]);

    // --- –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª ---
    useGameLoop(useCallback((deltaTime) => {
        if (hasFinished.current || status !== 'playing') return;
        const dtSec = deltaTime / 1000;

        // --- –¢–∞–π–º–µ—Ä –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å ---
        const newTimeLeft = Math.max(0, timeLeft - dtSec);
        setTimeLeft(newTimeLeft);
        if (newTimeLeft <= 0) {
            if (!hasFinished.current) {
                hasFinished.current = true;
                setStatus('won');
            }
            return;
        }
        const progress = (settings.survivalTime - newTimeLeft) / settings.survivalTime;
        const scrollSpeed = settings.baseScrollSpeed + progress * 45;
        const spawnChance = (0.08 + progress * 0.15) * settings.spawnRateMultiplier;

        // --- –°–∫—Ä–æ–ª–ª–∏–Ω–≥ —Ñ–æ–Ω–∞ ---
        setScrollOffset(offset => (offset + scrollSpeed * dtSec) % 100);

        // --- –î–≤–∏–∂–µ–Ω–∏–µ –ø—ã–ª–µ—Å–æ—Å–∞ ---
        setVacuumX(x => 50 + Math.sin(Date.now() / 1000) * 40);

        // --- –ü–æ—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π ---
        if (Math.random() < spawnChance) {
            setObstacles(o => [...o, {
                id: obstacleId.current++,
                content: obstacleTypes[Math.floor(Math.random() * obstacleTypes.length)],
                x: 10 + Math.random() * 80, // –ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
                y: -5, // –ü–æ—è–≤–ª—è—é—Ç—Å—è —Å–≤–µ—Ä—Ö—É
                size: 2 + Math.random() * 3, // –†–∞–∑–º–µ—Ä –≤ vmin
                rot: Math.random() * 360
            }]);
        }

        // --- –î–≤–∏–∂–µ–Ω–∏–µ –∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π ---
        const playerRect = { x: playerX - 2.5, y: PLAYER_Y_POS - 4, width: 5, height: 8 };
        setObstacles(currentObs => {
            const updated = [];
            for (const o of currentObs) {
                const newY = o.y + scrollSpeed * dtSec;
                if (newY > 110) continue; // –ò—Å—á–µ–∑–∞—é—Ç –∑–∞ —ç–∫—Ä–∞–Ω–æ–º

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
                const obsRect = { x: o.x - o.size / 2, y: newY - o.size / 2, width: o.size, height: o.size };
                 if (
                    playerRect.x < obsRect.x + obsRect.width &&
                    playerRect.x + playerRect.width > obsRect.x &&
                    playerRect.y < obsRect.y + obsRect.height &&
                    playerRect.y + playerRect.height > obsRect.y
                ) {
                    if (!hasFinished.current) {
                        hasFinished.current = true;
                        setStatus('lost');
                        // –ê–Ω–∏–º–∞—Ü–∏—è "–∑–∞—Å–∞—Å—ã–≤–∞–Ω–∏—è" –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏
                        const playerEl = document.getElementById('player-character');
                        if (playerEl) {
                           playerEl.style.transition = 'top 1s cubic-bezier(0.5, 0, 1, 1), transform 1s ease-in-out';
                           playerEl.style.top = '110%';
                           playerEl.style.transform = 'translate(-50%, -50%) scale(0) rotate(720deg)';
                        }
                        setTimeout(onLose, 1500);
                    }
                }

                updated.push({ ...o, y: newY });
            }
            return updated;
        });

    }, [status, timeLeft, playerX, obstacleTypes, onLose, settings]), status === 'playing');

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–º ---
    const handlePointerMove = (e: React.MouseEvent | React.TouchEvent) => {
        if (gameAreaRef.current && status === 'playing') {
            e.preventDefault();
            const rect = gameAreaRef.current.getBoundingClientRect();
            const pointer = 'touches' in e ? e.touches[0] : e;
            if (!pointer) return;
            const x = Math.max(5, Math.min(95, ((pointer.clientX - rect.left) / rect.width) * 100));
            setPlayerX(x);
        }
    };
    
    // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–∫–ª–æ–Ω–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    const playerTilt = (playerX - lastPlayerX.current) * 5;
    lastPlayerX.current = playerX;
    
    const handleWinContinue = () => {
        playSound(SoundType.BUTTON_CLICK);
        onWin();
    };
    
    return (
        <div 
            ref={gameAreaRef} 
            onMouseMove={handlePointerMove}
            onTouchMove={handlePointerMove}
            onTouchStart={handlePointerMove}
            className="w-full h-full bg-gray-900 flex flex-col items-center relative overflow-hidden cursor-none"
        >
            {/* –§–æ–Ω */}
            <div className="absolute inset-0 bg-gray-800 bg-[linear-gradient(to_bottom,rgba(255,255,255,0.1)_2px,transparent_2px),linear-gradient(to_right,rgba(255,255,255,0.1)_2px,transparent_2px)] bg-[size:50px_50px]" style={{ backgroundPosition: `0 ${scrollOffset}%` }}></div>

            {status === 'lost' && <div className="absolute inset-0 bg-black/80 z-50 flex items-center justify-center text-7xl text-red-500 animate-ping">–ó–ê–°–û–°–ê–õ–û</div>}
            {status === 'won' && <ZasosPylesosaWinScreen onContinue={handleWinContinue} charArt={charArt} />}

            {status === 'playing' && <>
                <div className="absolute top-16 text-3xl z-40 text-white">–£–ë–ï–ì–ê–ô: {Math.ceil(timeLeft)}</div>

                {/* –ò–≥—Ä–æ–∫ */}
                <div id="player-character" className="absolute z-30 pointer-events-none" style={{
                    left: `${playerX}%`,
                    top: `${PLAYER_Y_POS}%`,
                    transform: `translate(-50%, -50%) rotate(${playerTilt}deg)`,
                    transition: 'transform 0.1s linear',
                }}>
                     {charArt && <PixelArt artData={charArt} palette={PIXEL_ART_PALETTE} pixelSize={2} />}
                </div>
                
                {/* –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è */}
                {obstacles.map(o => (
                    <div key={o.id} className="absolute text-4xl z-20 pointer-events-none" style={{
                        left: `${o.x}%`,
                        top: `${o.y}%`,
                        fontSize: `${o.size}vmin`,
                        transform: `translate(-50%, -50%) rotate(${o.rot}deg)`,
                    }}>
                        {o.content}
                    </div>
                ))}
                
                {/* –ü—ã–ª–µ—Å–æ—Å */}
                <div className="absolute bottom-0 z-10" style={{ left: `${vacuumX}%`, transform: 'translateX(-50%)' }}>
                    <PixelVacuum animationToggle={Math.floor(timeLeft*2)%2 === 0}/>
                </div>
            </>}
        </div>
    );
};
